{"name":"Codevoid Utilities","body":"Utilities\r\n=========\r\nThis is a set of classes designed for use in Windows 8 WWAs using the WinJS frameworks.\r\n\r\nThere are a number of parts to this:\r\n\r\n## Shared Utilities ##\r\nThese are some common utility functions that allow you to write better code across the board.\r\n\r\n### appassert, alert ###\r\nBecause WWA's don't have an `alert` function, and instead have `Windows.UI.Popup.MessageBox`, there is a convenient replacement that looks like your mothers alert, but is async (since sync message boxes aren't possible in WWAs). Just call `alert` and all will be good.\r\n\r\nAdditionally, theres a basic assert through `appassert`, (named so as not to conflict with QUnit's assert class). This is like like a normal `assert`:\r\n`appassert(condition, message)`\r\n\r\nIf condition is not truthy, the previously mentioned `alert` is used to show a message to the consumer. If a debugger is attached, then the debugger will immediately break at this point too.\r\n### Signal ###\r\nWinJS introduces a powerful async parttern through Promises. However, sometimes, creating promises to perform & share promise patterns for your own async code is hard:\r\n\r\n    var complete, error, progress;    \r\n    var promise = new WinJS.Promise(function(c, e, p) {    \r\n        complete = c; error = e; progress = progress;    \r\n    });\r\n\r\nAnd thats before you start sharing them around and raising the completion etc at the correct times.\r\n\r\nUsing Codevoid.Utilities.Signal, this is a lot easier:\r\n\r\n    var signal = new Codevoid.Utilities.Signal();\r\n    signal.complete();\r\n    return signal.promise;\r\n\r\n## OAuth Helper ##\r\nWriting OAuth requests is a pain in the behind. While Windows 8 provides a [basic](http://msdn.microsoft.com/en-us/library/windows/apps/windows.security.authentication.web.aspx) way to obtain the secret tokens from the web flow, it doesn't actually make it easy to sign the requests etc. While the [sample](http://code.msdn.microsoft.com/windowsapps/Web-Authentication-d0485122) explains it, it doesn't make it really easy when you need to do the whole OAuth 1.0 request signing shinangians.\r\n\r\nThis class attempts to solve that by providing a WinJS.Promise based API that allows chaining, errors etc to propogate. It's simple to use, and I would recommend looking deeper into the tests to use it. However, simple usage:\r\n\r\n    var url = \"http://api.twitter.com/1/statuses/update.json\"  \r\n    var request = new Codevoid.OAuth.OAuthRequest(clientInfo, url);\r\n\r\n    request.data = [{ key: \"status\", value: \"Test@Status %78 update: \" + Date.now() }];\r\n    request.send().done(function (resultData) {\r\n        var result = JSON.parse(resultData);\r\n    },\r\n\r\nThats all there is too it. You get the raw response back, and you can do whatever you want.","tagline":"Stuff to help you do more stuff","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}