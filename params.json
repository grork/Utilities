{"name":"Codevoid Utilities","tagline":"Stuff to help you do more stuff","body":"Utilities\r\n=========\r\nThis is a set of classes designed for use in Windows 8 WWAs using the WinJS frameworks.\r\n\r\nThere are a number of parts to this:\r\n\r\n## Shared Utilities ##\r\nThese are some common utility functions that allow you to write better code across the board.\r\n\r\n### appassert, alert ###\r\nBecause WWA's don't have an `alert` function, and instead have `Windows.UI.Popup.MessageBox`, there is a convenient replacement that looks like your mothers alert, but is async (since sync message boxes aren't possible in WWAs). Just call `alert` and all will be good.\r\n\r\nAdditionally, theres a basic assert through `appassert`, (named so as not to conflict with QUnit's assert class). This is like like a normal `assert`:\r\n`appassert(condition, message)`\r\n\r\nIf condition is not truthy, the previously mentioned `alert` is used to show a message to the consumer. If a debugger is attached, then the debugger will immediately break at this point too.\r\n\r\n### Signal ###\r\nWinJS introduces a powerful async parttern through Promises. However, sometimes, creating promises to perform & share promise patterns for your own async code is hard:\r\n\r\n    var complete, error, progress;    \r\n    var promise = new WinJS.Promise(function(c, e, p) {    \r\n        complete = c; error = e; progress = progress;    \r\n    });\r\n\r\nAnd thats before you start sharing them around and raising the completion etc at the correct times.\r\n\r\nUsing Codevoid.Utilities.Signal, this is a lot easier:\r\n\r\n    var signal = new Codevoid.Utilities.Signal();\r\n    signal.complete();\r\n    return signal.promise;\r\n\r\n### Codevoid.Utilities.derive ###\r\nThis is a a helper for derive a class, and having access to the original base class easily.\r\n\r\nExample:\r\n\r\n        var control = WinJS.Class.define(function (argA) {\r\n            // Base constructor!\r\n        });\r\n\r\n        var derived = Codevoid.Utilities.derive(control, function (argA, argB) {\r\n            this.base(argA);\r\n            // Derived constructor!\r\n        });\r\n\r\n### Codevoid.Utilities.property ###\r\nWhen mixing the `WinJS.Utilities.eventMixin`, enables a simple `INotifyPropertyChanged` type contract in JS. When the event changes, an event is raised with `propertyNameChanged`, where `propertyName` is the name of the property, with the old & new value available of the `detail` property.\r\n\r\nExample:\r\n\r\n    var object = WinJS.Class.mix(WinJS.Class.define(function () {\r\n    }, {\r\n        sample: Codevoid.Utilities.property(\"sample\", null),\r\n    }), WinJS.Utilities.eventMixin);\r\n    \r\n    var instance = new object();\r\n        \r\n    var valueChanged = false;\r\n    instance.addEventListener(\"sampleChanged\", function () {\r\n        valueChanged = true;\r\n    });\r\n\r\n    instance.sample = Date.now();\r\n    \r\n### Codevoid.Utilities.addEventListeners ###\r\nEnables better management of DOM-style event handlers for adding & removing with much simpler patters. When called, returns an object with a `cancel` method that will remove all the event handlers added.\r\n\r\nExample:\r\n\r\n    var cancel = Codevoid.Utilities.addEventListeners(source, {\r\n       custom: function () {\r\n            eventWasRaised = true;\r\n        },\r\n        custom2: function () {\r\n            event2WasRaised = true;\r\n        },\r\n    });\r\n    \r\n    cancel.cancel(); // Cleaned up!\r\n    \r\n## UI Control Helpers ##\r\n\r\nThere are a nubmer of core challenges with WinJS, and WWAs when trying to make a maintainable, well built application:\r\n\r\n* Avoid lots of code-driven layout.\r\n* Enable easy clean up of controls\r\n\r\nThe utilities in `Codevoid.Utilities.DOM` try to mitigate some of these issues.\r\n\r\n### Easy clean up of controls ###\r\n#### disposeOfControl / disposeOfControlTree / removeChild ####\r\nThese are a family of methods that make it easy to clean up controls when they're being removed from the DOM.\r\n\r\nThese should be called to either clean up controls before removal, or if you want to be super lazy, when removing & cleanup with `removeChild`.\r\n\r\nFor this to work, each of the controls that needs to do disposal work in the DOM must:\r\n\r\n* Implement a `dispose` method\r\n* Be on a DOM element which has a `data-win-control` attribute\r\n\r\n\r\nExample usage:\r\n\r\n    Codevoid.Utilities.DOM.disposeOfControlTree(domElementTree);\r\n    \r\n#### Avoiding Code Driven Layout ####\r\nWouldn't it be nice if you could squirrel away the markup structure in another HTML file so that you can easily reuse the markup in many parts of the application. What if you could also ensure that any scripts, or CSS required by that markup was also magically included?\r\n\r\nTurns out WinJS has this! It's just not easily usable -- `WinJS.UI.Fragments` and `WinJS.Binding.Template` give you all that you need, but they're a bit of a pain in the behind to use together easily.\r\n\r\n#### Codevoid.Utilities.DOM.loadTemplate ####\r\nThis helper will take a fragment (e.g. a HTML file), search for a specific template in that fragment, and then hand you the `WinJS.Binding.Template` to you so you can render it into the DOM.\r\n\r\nExample:\r\n\r\nHTML\r\n\r\n    <html>\r\n        <body>\r\n            <div data-win-control=\"WinJS.Binding.Template\"\r\n                 data-templateid=\"sampleTemplate\">\r\n                 <div>Stuff!</div>\r\n            </div>\r\n        </body>\r\n    </html>\r\n    \r\nJavaScript:\r\n\r\n    Codevoid.Utilities.DOM.loadTemplate(\"/Path/To/Templates.html\",\r\n        \"sampleTemplate\").then(function(control) {\r\n        control.render(dataContext, containerDiv);\r\n    });\r\n                                        \r\nMore detailed examples included in the tests for this project.\r\n\r\n#### Codevoid.Utilities.DOM.marryPartsToControl / marryEventsToControl ####\r\nDo you ever want to load a template, and have the different sections & child controls automatically extracted so you don't have to `querySelector` all the time? What if we could attach event handlers too? These two helper methods are the answer!\r\n\r\nExample:\r\n\r\nHTML\r\n\r\n    <div data-event=\"{ custom: handleCustom }\"\r\n         data-part=\"parent\">\r\n        <div data-event=\"{ custom2: handleCustom2 }\"\r\n             data-part=\"child\">\r\n        </div>\r\n    </div>\r\n\r\nJavaScript\r\n\r\n    var instance = {\r\n        handleCustom: function() {}\r\n        handleCustom2: function() {},\r\n    };\r\n    \r\n    Codevoid.Utilities.DOM.marryPartsToControl(domElement, instance);\r\n    // Now instance has 'partent', and 'child' properties now set\r\n    // with the elements in those properties.\r\n    \r\n    Codevoid.Utilities.DOM.marryEventsToControl(domElement, instance);\r\n    // If you raise custom2 DOM event in this tree, the handler on\r\n    // instance will be raised. Same for custom.\r\n    \r\n## OAuth Helper ##\r\nWriting OAuth requests is a pain in the behind. While Windows 8 provides a [basic](http://msdn.microsoft.com/en-us/library/windows/apps/windows.security.authentication.web.aspx) way to obtain the secret tokens from the web flow, it doesn't actually make it easy to sign the requests etc. While the [sample](http://code.msdn.microsoft.com/windowsapps/Web-Authentication-d0485122) explains it, it doesn't make it really easy when you need to do the whole OAuth 1.0 request signing shinangians.\r\n\r\nThis class attempts to solve that by providing a WinJS.Promise based API that allows chaining, errors etc to propogate. It's simple to use, and I would recommend looking deeper into the tests to use it. However, simple usage:\r\n\r\n    var url = \"http://api.twitter.com/1/statuses/update.json\"  \r\n    var request = new Codevoid.OAuth.OAuthRequest(clientInfo, url);\r\n\r\n    request.data = [{ key: \"status\", value: \"Test@Status %78 update: \" + Date.now() }];\r\n    request.send().done(function (resultData) {\r\n        var result = JSON.parse(resultData);\r\n    },\r\n\r\nThats all there is too it. You get the raw response back, and you can do whatever you want.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}